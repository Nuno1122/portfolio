exit
morning_activity_log.achieved?
exit
allowed_time
morning_activity_log.achieved?
exit
morning_activity_log.achieved?
exit
morning_activity_log.achieved?
morning_activity_log.started_time.achieved?
morning_activity_log.started_time
MorningActivityLog.allowed_start_time
allowed_start_time
start_time_plan.start_time
tart_time_plan.start_time
allowed_time
morning_activity_log
morning_activity_log.achieved?
expect(morning_activity_log.achieved?).to eq(true)
morning_activity_log.started_time
allowed_time
exit
p started_time.between?(allowed_start_time, allowed_end_time)
p today
p allowed_end_time
p allowed_start_time
p start_time_plan
p started_time
exit
p allowed_start_time
allowed_start_time
p start_time_plan.start_time
p morning_activity_log.started_time
exit
current_monthly_achievement(user)
MorningActivityLog.create_log_and_check_achievement(user, start_time_plan.id) 
MorningActivityLog
expect { MorningActivityLog.create_log_and_check_achievement(user, start_time_plan.id) }
            .to change { current_monthly_achievement(user).achieved_count }.by(1)
exit
current_monthly_achievement
exit
morning_activity_log.save
puts MorningActivityLog.all.inspect
uts MorningActivityLog.all.inspect
puts start_time_plan.inspect
puts user.inspect
puts morning_activity_log.errors.full_messages
puts redirect_params
puts result
start_time_plan.id
morning_activity_log
morningActivityLog
exit
morning_activity_log
exit
morning_activity_log
exit
morning_activity_log
exit
expect { MorningActivityLog.increment_achieved_count(user) }
        .to change { user.monthly_achievements.find_by(month: Time.current.month, year: Time.current.year).achieved_count }
        .by(1)
exit
nil?
post.errors.full_messages
post.valid?
exit
post.valid?
puts post.errors.full_messages
puts post
puts post.inspect
exit
 let(:post) { build(:post, content: 'a' * 231) 
context
context?
context/
continue
 calculate_ranking(rankings_with_user_objects)
rankings_with_user_objects
User.where(id: user_ids).index_by(&:id)
User.where(id: user_ids)
users
achievements_ranking
user_ids 
MonthlyAchievement.achievements_ranking(year, month)
achievements_ranking(year, month)
MonthlyAchievement
achievements_ranking
chievements_ranking
exit
session
exit
Post.find(params[:post_id])
Post.includes(:likes)
 post
exit
@post
turbo_stream
exit
request
session[:return_to]
exit
@achieved_count
@previous_achieved_count
exit
user.monthly_achievements.find_or_initialize_by(month: Time.current.month, year: Time.current.year)
exit
@morning_activity_log.started_time
@morning_activity_log 
exit
allowed_end_time
started_time
exit
(started_time >= allowed_start_time) && (started_time <= allowed_end_time)
allowed_end_time
started_time
exit
allowed_start_time
started_time
exit
allowed_end_time
allowed_start_time
started_time
exit
@morning_activity_log.started_time
 @morning_activity_log
exit
started_time
allowed_end_time
allowed_start_time
